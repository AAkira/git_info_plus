group 'io.github.aakira.git_info_plus'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.3.50'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 30

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        minSdkVersion 16

        buildConfigField "String", "GIT_BRANCH_NAME", "\"${getBranchName()}\""
        buildConfigField "String", "GIT_LAST_COMMIT_DATE", "${getLastCommitDate()}"
        buildConfigField "String", "GIT_LAST_COMMIT_HASH", "\"${getHash()}\""
        buildConfigField "String", "GIT_LAST_COMMIT_HASH_SHORT", "\"${getHashShort()}\""
        buildConfigField "String", "GIT_LAST_COMMIT_MESSAGE", "\"${getCommitMessage()}\""
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

def getHash() {
    return execCommand(['git', 'rev-parse', 'HEAD'], null)
}

def getHashShort() {
    return execCommand(['git', 'rev-parse', '--short', 'HEAD'], null)
}

def getCommitMessage() {
    return execCommand(['git', 'log', '-1', '--pretty=%s'], null)
}

def getLastCommitDate() {
    return execCommand(['git', '--no-pager', 'log', '-1', '--format="%ai"'], null)
}

def getBranchName() {
    return execCommand(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], null)
}

def execCommand(command, returnValue) {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine command
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (e) {
        return returnValue
    }
}
